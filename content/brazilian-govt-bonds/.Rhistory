c = 1:10:0.01
c = seq(0, 1, 0.01)
c
rm(c)
a = seq(0, 1, 0.01)
rm(a)
x = seq(0, 1, 0.01)
y = exp(x)
plot(x, y)
plot(x, y, type='line')
plot(x, y, type='l')
plot(x, y, type='l')
yhoo.df
length(yhoo.df)
length(yhoo.df$Close)
bmwRet
length(bmwRet)
length(bmwRet$BMW)
plot(bmwRet$BMW, type='l')
hist(bmwRet$BMW)
help(hist)
hist(bmwRet$BMW, breaks=50)
hist(bmwRet$BMW, breaks=100)
50*(15*12)*((1-0.5/100)^(15*12)-1)/(0.5/100)
50*(15*12)*((1+0.5/100)^(15*12)-1)/(0.5/100)
fut = function(R, i, n) { R*((1+i)^n-1)/i) }
fut = function(R, i, n) { R*((1+i)^n-1)/i }
fut(50, 0.5/100, 12*15)
50*12*15
fut(50, 0.5/100, 12*10)
help(data)
data(package="timeSeries")
data(package="fGarch")
data(sp500dge)
library(fGarch)
data(sp500dge)
class(sp500dge)
head(sp500dge)
data(package="rpart")
View(sp500dge)
help(library)
library(timeSeries)
data(MSFT)
fix(MSFT)
data(package="timeSeries")
data(USDCHF)
ts.plot(USDCHF)
plot.ts(USDCHF)
is.ts(MSFT)
ts(series(MSFT[,4]))
msft.c = ts(series(MSFT[,4]))
plot.ts(msft.c)
fix(msft.c)
msft.c
is.ts(msft.c)
library(ctv)
install.views("Finance")
install.packages("PairTrading")
install.packages("SV")
setRepositories()
install.packages("SV")
install.packages("PairTrading")
chooseCRANmirror()
install.packages("PairTrading")
chooseCRANmirror()
install.packages("PairTrading")
install.packages("~/Downloads/PairTrading_1.0.tgz", repos = NULL)
help(PairTrading)
library(PairTrading)
install.packages(c("DAAG", "MCMCpack", "Matrix", "R.matlab", "R.utils", "RArcInfo", "RBGL", "RSQLite", "RandomFields", "Rmpi", "VIM", "alr3", "ape", "caTools", "class", "cluster", "coda", "codetools", "coin", "deldir", "ergm", "flexmix", "gam", "gee", "ggplot2", "graph", "hexbin", "kernlab", "latentnet", "lattice", "mapproj", "maxLik", "mboost", "mclust", "mgcv", "mice", "miscTools", "mlogit", "multcomp", "network", "party", "plm", "plyr", "quantreg", "randomForest", "rgl", "scatterplot3d", "slam", "sna", "spatstat", "statmod", "survival"), lib="/Library/Frameworks/R.framework/Versions/2.11/Resources/library")
library(ctv)
install.packages("Graphics")
install.views("Graphics")
a = 1
library(tseries)
library(tseries)
ustart <-"2000-12-30";uend <-"2007-12-30" #start and end date
xxx<-get.hist.quote(instrument = "MSFT", start=ustart, end=uend,quote = c("Open", "High", "Low", "Close"),provider = "yahoo", compression = "m")
xxx
class(xxx)
msft.ts <- as.ts(xxx)
class(msft.ts)
msft.ts
help(get.hist.quote)
xxx<-get.hist.quote(instrument = "MSFT", start=ustart, end=uend,quote = c("Open", "High", "Low", "Close"),provider = "yahoo", compression = "d")
xxx<-get.hist.quote(instrument = "MSFT", start=ustart, end=uend,quote = c("Open", "High", "Low", "Close"),provider = "yahoo", compression = "d", retclass="ts")
class(xxx)
xxx
source('~/Dev/R/get.quote.R')
list
all_dat
source('~/Dev/R/get.quote.R')
list[1]
list[[1]]
list(1)
all_dat[1]
class(all_dat[1])
class(all_dat[[1]])
all_dat[[1]]
source('~/Dev/R/get.quote.R')
all_dat[[1]]
source('~/Dev/R/get.quote.R')
class(all_dat[[1]])
all_dat[[1]]
vale5 <- all_dat[[0]]["Close"]
all_dat[[0]]
vale5 <- all_dat[[1]]["Close"]
vale5
vale5 <- all_dat[[1]]
vale5
vale5["Close"]
names(vale5)
class(vale5)
plot(vale5)
slotNames(vale5)
slotNames(vale5$.tsp)
slotNames(vale5@.tsp)
install.packages("RODBC")
library(RODBC)
detach("package:RODBC")
array(dim=(1,10))
array(dim=c(1,10))
array(dim=c(10,10))
class(array(dim=c(10,10)))
class(array(dim=c(1,10)))
class(array(dim=c(10,1)))
class(vector(length=8))
class(vector(length=8), mode="integer")
class(vector(length=8, mode="integer"))
capabilities()
capabilities(what="png"")
;
""
capabilities(what="png")
capabilities(what=png)
capabilities(what=c("png", "tiff"))
z <- rnorm(300, 1, 2)
t.test(x)
t.test(z)
unlist(t.test(z))
class(unlist(t.test(z)))
library("MASS")
traceback()
pi
trunc(pi, units=3)
trunc(pi, digits=3)
round(pi, digits=3)
round(pi, digits=4)
signif(pi, digits=4)
signif(pi, digits=4)
signif(pi, digits=5)
library(Rcmdr)
round(0.5)
round(0.5, 0)
round(0.5, 1)
round(0.555, 1)
round(0.555, 0)
round(0.555, 2)
install.packages('knitr')
install.packages('knitr')
data(iris2)
data(iris3)
options(digits=4, width=70)
# load packages
library("PerformanceAnalytics")
library("zoo")
################################################################################
# introduction to portfolio theory
################################################################################
# source portfolio functions
source(file="http://spark-public.s3.amazonaws.com/compfinance/R%20code/portfolio.r")
# load data from class website
lab8returns.df = read.csv(file="http://spark-public.s3.amazonaws.com/compfinance/R%20code/lab8returns.csv",
stringsAsFactors=FALSE)
# 7/31/12: fix to problem with the yearmon class
dates = seq(as.Date("1992-07-01"), as.Date("2000-10-01"), by="months")
lab8returns.df$Date = dates
# create zoo object
lab8returns.z = zoo(lab8returns.df[,-1], lab8returns.df$Date)
plot(lab8returns.z, lwd=2, col="blue")
# compute estimates of CER model and annualize
muhat.annual = apply(lab8returns.z,2,mean)*12
sigma2.annual = apply(lab8returns.z,2,var)*12
sigma.annual = sqrt(sigma2.annual)
covmat.annual = cov(lab8returns.z)*12
covhat.annual = cov(lab8returns.z)[1,2]*12
rhohat.annual = cor(lab8returns.z)[1,2]
rhohat.annual = cor(lab8returns.z)[1,2]
rhohat.annual
library("PerformanceAnalytics")
library("zoo")
getwd()
setwd("Google Drive/Courses and Training/trading-strategies/")
library(slidify)
author("wilson")
getwd()
install.packages("fTrading")
library(fTrading)
demo()
0.43*12
5.59*sqrt(12)
exp(12*0.08/100)-1
100*(exp(12*0.08/100)-1)
r.f <- 100*(exp(12*0.08/100)-1)
mu <- 0.43*12
sig <- 5.59*sqrt(12)
(mu - r.f)/sig
0.49*12
2.9*sqrt(12)
sig = 2.9*sqrt(12)
mu = 0.49*12
(mu - r.f)/sig
(5.88 - r.f)/10.05
options(digits=3)
(5.88 - r.f)/10.05
options(digits=2)
(5.88 - r.f)/10.05
mu <- 1.28*12
sig <- 8.45*sqrt(12)
c(mu, sig)
mu
options(digits=4)
mu
c(mu, sig)
(mu - r.f)/sig
0.08*12
r.f
(mu - 0.96)/sig
(12 - r.f)/(1.76 - r.f)
(12 - r.f)/(1.76*12 - r.f)
6.53*12*(12 - r.f)/(1.76*12 - r.f)
6.53*sqrt(12)*(12 - r.f)/(1.76*12 - r.f)
6.53*(12 - r.f)/(1.76*12 - r.f)
x.b = (12 - r.f)/(1.76*12 - r.f)
x.b
6.53*12
6.53*sqrt(12)
6.53*sqrt(12)*x.b
6.53*x.b
x.b = (1 - r.f)/(1.76 - r.f)
x.b
x.b = (1 - 0.08)/(1.76 - 0.08)
x.b
0.45*c(-197,151,145)/100
sum(0.45*c(-197,151,145)/100)
0.45*c(-197,151,145)/100
0.55*c(-197,151,145)/100
pnorm(0.05, mean=0.4/100, sd=2.84/100)
ic = pnorm(0.05, mean=0.4/100, sd=2.84/100)
ic = pnorm(0.05, mean=0.4/100, sd=2.84/100) - 1
ic
ic = pnorm(0.05, mean=0.4/100, sd=2.84/100)
ic = pnorm(0.05)
ic
qnorm(0)
qnorm(0.05)
ic = qnorm(0.05, mean=0.4/100, sd=2.84/100)
ic
(1 - ic)*100000
-ic*100000
(0.4/100 + (2.84/100)*(-1.645))*100000
((2.84/100)*(-1.645))*100000
(0.4/100 + (2.84/100)*(-1.645))*100000
qnorm(0.05)
(exp(0.4/100 + (2.84/100)*(-1.645)) - 1)*100000
options(digits=10)
(exp(0.4/100 + (2.84/100)*(-1.645)) - 1)*100000
(1.5262 - 1)/0.1214
(0.16639 - 1)/0.07744
(1.00139 - 1)/0.08194
0.23*1.00139 + 0.87*0.16639 + (-0.1)*1.5262
0.005/0.04
sqrt(250)* 0.005/0.04
0.005/0.04
require(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
?acf
x = rnorm(100)
a = acf(x, type="correlation")
a
class(a)
names(a)
a$series
a$lag
a$acf
ar1.acf = ARMAacf(ar = 0.7, ma = 0, lag.max = 10)
ar1.acf
class(ar1.acf)
names(ar1.acf)
a$lag
a$n.used
a
a$snames
acf
a$series
e = c(100, rnorm(250))  # p_0 = 100
y.rw = cumsum(e)
y.acf = acf(y.rw, type="correlation")
plot(y.rw)
e = c(100, rnorm(250))
e
y.rw = cumsum(e)
y.rw
plot(y.rw, type="l")
acf(y.rw)
require("FinancialInstrument")
install.packages("FinancialInstrument")
require("FinancialInstrument")
ls_stocks()
ls_instruments()
currency("BRL")
BRL
stock("IBM")
stock("IBM", currency="USD")
currency("USD")
stock("IBM", currency="USD")
ls_instruments()
getInstrument("BRL")
getInstrument("IBM")
update_instruments.yahoo("BRL")
BRL
getInstrument("BRL")
update_instruments.yahoo("IBM")
getInstrument("IBM")
getSymbols("BRL")
stock("PETR3", currency="BRL")
update_instruments.yahoo("PETR3")
ls_stocks()
getInstrument("PETR3")
getSymbols("PETR3")
getSymbols("PETR3.SA")
stock("PETR3.SA", currency="BRL")
update_instruments.yahoo("PETR3.SA")
getInstrument("PETR3")
update_instruments.yahoo("PETR3.SA")
getInstrument("PETR3")
library(TTR)
help(TTR)
data(ttrc)
head(ttrc)
bbands <- BBands( ttrc[,c("High","Low","Close")] )
head(bbands)
class(bbands)
bbands
head(bbands)
nyseSymbols <- stockSymbols("NYSE")
nyseSymbols
nyseSymbols <- stockSymbols("BVSP")
nyseSymbols <- stockSymbols("BOVESPA")
nyseSymbols <- stockSymbols("NASDAQ")
nyseSymbols <- stockSymbols("CBOT")
library(quantmod)
Cl
library(devtools)
install_github('knitr', 'yihui')
install_github('evaluate', 'hadley')
mkd='<style></style><img src=""><a href="">Hello</a>'
cat(markdownToHTML(text=mkd,options=c(tOpt)))
library(markdown)
mkd='<style></style><img src=""><a href="">Hello</a>'
cat(markdownToHTML(text=mkd,options=c(tOpt)))
cat(markdownToHTML(text=mkd,options=c(tOpt,"skip_html")))
tOpt <- 'fragment_only'
mkd='<style></style><img src=""><a href="">Hello</a>'
cat(markdownToHTML(text=mkd,options=c(tOpt)))
cat(markdownToHTML(text=mkd,options=c(tOpt,"skip_html")))
cat(markdownToHTML(text=mkd,options=c(tOpt)))
cat(markdownToHTML(text=mkd,options=c(tOpt,"skip_style")))
cat(markdownToHTML(text='[foo](foo://bar "baz")',options=c(tOpt)))
cat(markdownToHTML(text='[foo](foo://bar "baz")',options=c(tOpt,'safelink')))
cat(markdownToHTML(text=mkd,options=c(tOpt,'toc')))
cat(markdownToHTML(text='foo\nbar\n',options=c(tOpt,'hard_wrap')))
cat(markdownToHTML(text='foo\nbar\n',options=c(tOpt)))
cat(markdownToHTML(text='foo\nbar\n',options=c(tOpt,'hard_wrap')))
cat(markdownToHTML(text='foo\nbar\n',options=c(tOpt,'hard_wrap', 'use_xhtml')))
cat(markdownToHTML(text='1/2 (c)',options=c(tOpt,'smartypants')))
mkd <- '
# Header 1
p1
## Header 2
p2
'
cat(markdownToHTML(text=mkd,options=c(tOpt,'toc')))
mkd='<style></style><img src=""><a href="">Hello</a>'
cat(markdownToHTML(text=mkd,options=c(tOpt,'skip_html')))
cat(markdownToHTML(text=mkd,options=c(tOpt,'skip_html', 'escape')))
registeredRenderers()
markdownHTMLOptions()
markdownHTMLOptions(default=TRUE)
cat(markdownToHTML(text=mkd, extensions=c('lax_space')))
'
;
''
'
mkd <- '
<div>
Chunks without labels will be assigned labels like unnamed-chunk-i where _i_ is the chunk number.
</div>
'
cat(markdownToHTML(text=mkd, extensions=c('lax_space')))
cat(markdownToHTML(text=mkd, extensions=c('')))
cat(markdownToHTML(text=mkd, extensions=NULL)
cat(markdownToHTML(text=mkd, extensions=NULL)
cat(markdownToHTML(text=mkd, extensions=NULL))
cat(markdownToHTML(text=mkd, extensions=NULL, options=NULL))
cat(markdownToHTML(text=mkd, extensions=NULL, options=c('fragment_only')))
cat(markdownToHTML(text=mkd, extensions=NULL, options=c(''), fragment.only=TRUE))
cat(markdownToHTML(text=mkd, extensions=c(''), options=c(''), fragment.only=TRUE))
mkd <- '
<div>Chunks without labels will be assigned labels like unnamed-chunk-i where _i_ is the chunk number.</div>
'
cat(markdownToHTML(text=mkd, extensions=c(''), options=c(''), fragment.only=TRUE))
mkd <- '<div>_i_</div>'
cat(markdownToHTML(text=mkd, extensions=c(''), options=c(''), fragment.only=TRUE))
cat(markdownToHTML(text=mkd, extensions=c('lax_spacing'), options=c(''), fragment.only=TRUE))
",extensions=c('lax_spacing')))
;
'
'
'
'
'
;
cat(markdownToHTML(text="
Embedding html without surrounding with empty newline.
<div>_markdown_</div>
extra text.
",extensions=c('lax_spacing')))
cat(markdownToHTML(text="
Embedding html without surrounding with empty newline.
<div>_markdown_</div>
extra text.
",extensions=c('')))
cat(markdownToHTML(text="<div>_markdown_</div>",extensions=c('')))
exp(1)
pi*2
1 + 1
log(2)
library(YieldCurve)
library(xts)
source('~/.active-rstudio-document')
data(FedYieldCurve)
rate.Fed = first(FedYieldCurve, '5 month')
maturity.Fed <- c(3/12, 0.5, 1,2,3,5,7,10)
NSParameters <- Nelson.Siegel( rate= rate.Fed, maturity=maturity.Fed )
fix(maturity.Fed)
fix(rate.Fed)
data(FedYieldCurve)
tau <- c(3, 6, 12, 60, 84, 120)
mediumTerm <- c(12,60,84)
NSParameters <- Nelson.Siegel( rate=FedYieldCurve[1:10,],
maturity=tau, MidTau=mediumTerm )
y <- NSrates(NSParameters[5,1:3],
NSParameters$lambda[5],tau)
plot(tau,FedYieldCurve[5,],main="Fitting Nelson-Siegel yield curve", type="o")
lines(tau,y, col=2)
legend("topleft",legend=c("observed yield curve","fitted yield curve"),
col=c(1,2),lty=1)
plot(tau,FedYieldCurve[5,],main="Fitting Nelson-Siegel yield curve", type="o")
lines(tau,y, col=2)
legend("bottomleft",legend=c("observed yield curve","fitted yield curve"),
col=c(1,2),lty=1)
grid()
plot(tau,FedYieldCurve[5,],main="Fitting Nelson-Siegel yield curve", type="o")
lines(tau,y, col=2)
legend("bottomright",legend=c("observed yield curve","fitted yield curve"),
col=c(1,2),lty=1)
grid()
install.packages('bizdays')
install.packages("bizdays")
library(bizdays)
cal <- Calendar(holidays=holidaysANBIMA, name='ANBIMA')
bizdays.options$set(default.calendar=cal)
bizdays('2013-01-02', '2013-07-12')
setwd("~/dev/articles/brazilian govt bonds")
