<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Wilson Freitas</title><link>http://wilsonfreitas.github.io/</link><description></description><atom:link href="http://wilsonfreitas.github.io/feeds/scraps.rss.xml" rel="self"></atom:link><lastBuildDate>Thu, 15 Jan 2015 00:00:00 -0200</lastBuildDate><item><title>Captura de dados da Corrida de São Silvestre com Python—Parte 1</title><link>http://wilsonfreitas.github.io/posts/captura-de-dados-da-corrida-de-sao-silvestre-com-python-parte-1.html</link><description>&lt;p&gt;Eu gosto de praticar corrida de rua, e 2014 foi um ano fenomenal pois eu levei isso para o próximo nível, comecei a praticar meias maratonas.
Em 2014 foram 4 começando com a Meia Maratona de SP em março e terminando com o Circuito Athenas em novembro.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Corridas de 2014" src="/figure/corridas-2014.png" /&gt;&lt;/p&gt;
&lt;p&gt;A primeira primeira prova do ano, em março, foi terrível pois, estava o calor estava muito forte.
Concluí a prova em 2h02m com muito sacrifício.
Nas 3 provas seguintes eu fiz as marcas 1h48m, 1h49m, 1h47m, ou seja, consegui reduzir o meu tempo em 15m aproximadamente.
Obviamente a experiência da primeira prova serviu para as demais, além do treinamento, mas todas as demais provas foram em dias de temperaturas mais amenas.
Uma ponto muito discutido pelos praticantes de corrida de rua é o efeito da temperatura no desempenho do atleta, principalmente para os amadores.
No treinamento é perceptível, dias mais quentes são miseráveis para treinar—e dias mais frios miseráveis para acordar.
O calor faz com que a &lt;em&gt;bateria&lt;/em&gt; do atleta descarregue mais rapidamente e não é apenas uma questão de recarregar a bateria, se hidratando e consumindo carboidratos e sal, o corpo vai meio que se estafando produzindo caimbras e podendo acontecer até coisa pior, como desmaiar por carência de alguma coisa.&lt;/p&gt;
&lt;p&gt;Com isso em mente eu resolvi buscar formas quantitativas de avaliar o desempenho de corredores versus o clima.
Procurei algumas corridas no Brasil e a mais tradicional é a Corrida Internacional de São Silvestre que ocorre sempre no mesmo dia do ano, apesar de ter ocorrido em horários diferentes ao longo dos anos.
A corrida de São Silvestre tem o percurso de 15Km, é menor que uma meia maratona, 21Km, no entanto, em 15Km os efeitos do clima já se tornam perceptíveis.
Um aspecto favorável a Corrida de São Silvestre é que ela ocorre no mesmo dia do ano, 31 de dezembro, e isso ajuda a cruzar com os dados de clima, que podem vir em frequência diária.
Outro ponto é que no site da &lt;a href="http://www.saosilvestre.com.br/"&gt;corrida&lt;/a&gt; temos a área de &lt;a href="http://www.saosilvestre.com.br/campeoes/"&gt;campeões&lt;/a&gt; com os tempos de todos os campeões desde a primeira edição em 1925.
Observando apenas os dados dos campeões a análise fica um pouco viesada, pois aqui eu assumo a hipótese de que os campeões tenham mais resistência que atletas não profissionais e talvez eu não consiga medir o que eu desejo, que é o efeito do clima sobre o desempenho da corrida.
Portanto, o não resultado é um resultado, indicando que a amostra deve ser estendida.&lt;/p&gt;
&lt;p&gt;Neste post eu vou apresentar como eu capturei os dados dos campeões e os dados de clima.
A análise fica para outro post.
Como toda a análise ficou maior do que esperava eu criei o repositório &lt;a href="https://github.com/wilsonfreitas/saosilvestre"&gt;saosilvestre&lt;/a&gt; para todos os códigos, tanto da captura como da análise.
Toda a captura dos dados foi feita com Python e a análise feita com R.
Este trabalho foi uma ótima oportunidade para ver como essas linguagens se complementam.
Claro que tudo poderia ser realizado apenas com uma linguagem, mas eu tenho pontos fortes e fracos em ambas e neste caso resolvi utilizar os pontos que considero fortes.
Eu já tinha um material para fazer capturas em Python pronto e fazer a análise de dados com R foi muito simples.&lt;/p&gt;
&lt;h2&gt;Capturando os dados dos campeões da Corrida de São Silvestre&lt;/h2&gt;
&lt;p&gt;Como já mencionei a captura foi feita com Python e em particular utilizei o módulo &lt;a href="https://gist.github.com/wilsonfreitas/8bd1a0a5296c65948918"&gt;scraps&lt;/a&gt; desenvolvido por mim.
Além do &lt;a href="https://gist.github.com/wilsonfreitas/8bd1a0a5296c65948918"&gt;scraps&lt;/a&gt; utilizei outros 2 módulos também desenvolvidos por mim: &lt;a href="https://gist.github.com/wilsonfreitas/7f6450343b3958a67f4e"&gt;textparser&lt;/a&gt; e &lt;a href="https://gist.github.com/wilsonfreitas/597532ea0915d224b354"&gt;tinydf&lt;/a&gt;.
Já falei a respeito do &lt;a href="https://gist.github.com/wilsonfreitas/8bd1a0a5296c65948918"&gt;scraps&lt;/a&gt; no post &lt;a href="http://wilsonfreitas.github.io/posts/faca-voce-mesmo-um-web-scraper-em-python.html"&gt;Faça você mesmo um Web Scraper em Python&lt;/a&gt;.
O &lt;a href="https://gist.github.com/wilsonfreitas/7f6450343b3958a67f4e"&gt;textparser&lt;/a&gt; faz, como o nome sugere, &lt;em&gt;parse&lt;/em&gt; de texto e faz isso basendo-se em expressões regulares, nada mais trivial.
A motivação para criá-lo foi que toda vez que eu precisava converter um texto para um número ou data eu ficava copiando funções de um lado para outro e foi então que decidi colocar tudo em um lugar só e que fosse útil de forma simples e direta.
O que torna-o interessante é que as expressões regulares são declaradas na documantação dos métodos e os métodos são preparados para receber o texto e o objeto &lt;em&gt;re.MatchObject&lt;/em&gt; que traz informações do &lt;em&gt;parse&lt;/em&gt;.
O uso do &lt;a href="https://gist.github.com/wilsonfreitas/7f6450343b3958a67f4e"&gt;textparser&lt;/a&gt; merece um post, aqui, por hora, vou me ater a implementação pois acredito que a simplicidade vai facilitar a compreensão.
O &lt;a href="https://gist.github.com/wilsonfreitas/597532ea0915d224b354"&gt;tinydf&lt;/a&gt; é uma implementação rudimentar de um &lt;em&gt;DataFrame&lt;/em&gt;.
Digo rudimentar por que se eu quisesse um &lt;em&gt;DataFrame&lt;/em&gt; de verdade seria melhor usar o &lt;a href="http://pandas.pydata.org"&gt;pandas&lt;/a&gt;, no entanto, eu preciso do &lt;em&gt;DataFrame&lt;/em&gt; para gerar o arquivo CSV, por isso criei o &lt;a href="https://gist.github.com/wilsonfreitas/597532ea0915d224b354"&gt;tinydf&lt;/a&gt; para gerar dados tabulares em formatos comuns: CSV, JSON, e dict, por enquanto.&lt;/p&gt;
&lt;p&gt;A captura é executada em 3 etapas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Definição do &lt;em&gt;scrap&lt;/em&gt; para &lt;em&gt;parse&lt;/em&gt; do html&lt;/li&gt;
&lt;li&gt;Criação do &lt;em&gt;parser&lt;/em&gt; de texto para a extração e formatação do conteúdo de interesse&lt;/li&gt;
&lt;li&gt;Formatação em CSV&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Definindo o &lt;em&gt;scrap&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;O &lt;em&gt;scrap&lt;/em&gt; é fundamental pois ele determina como o conteúdo da página vai ser capturado de fato, após a captura realizada pelo &lt;em&gt;scrap&lt;/em&gt; é massagem nos dados para que fiquem em um formato interesante para a análise.
Os campeões estão dividos em décadas e em cada década eles são distribuídos em DIVs como este:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;col-lg-6 col-sm-6 col-xs-12&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Edwin Kipsang&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;89ª Corrida de São Silvestre – 2013&lt;span class="nt"&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Naturalidade:&lt;span class="ni"&gt;&amp;amp;nbsp;&lt;/span&gt;Quênia&lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
Equipe: -&lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
Horário da Largada: 09h00&lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
Tempo: 43min47&lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
Percurso: 15 Km&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;&lt;/span&gt;Percurso&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
Largada: Av. Paulista, próximo à Rua Ministro Rocha Azevedo (sentido Consolação).&lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
Chegada: Av. Paulista, 900, em frente ao Edifício da Fundação Cásper Líbero.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Acesse uma página de campeões completa no &lt;a href="http://www.saosilvestre.com.br/campeoes/campeoes-2010-2013/"&gt;link&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Os elementos de interesse são os títulos &lt;code&gt;h2&lt;/code&gt; e &lt;code&gt;h4&lt;/code&gt;, e os parágrafos.
Para capturar dados com esta estrutura eu criei o seguinte &lt;em&gt;scrap&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;split&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maxsplit&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maxsplit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;maxsplit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;foreach&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SaoSilvestreScrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scraps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Scrap&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scraps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Attribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;//*[@id=&amp;quot;content&amp;quot;]/div/div/div/div/div/h2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;races&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scraps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Attribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;//*[@id=&amp;quot;content&amp;quot;]/div/div/div/div/div/h4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;info1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scraps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Attribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;//*[@id=&amp;quot;content&amp;quot;]/div/div/div/div/div/p[1]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;info2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scraps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Attribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;//*[@id=&amp;quot;content&amp;quot;]/div/div/div/div/div/p[2]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O &lt;em&gt;scrap&lt;/em&gt; tem 3 atributos: &lt;code&gt;names&lt;/code&gt; com os nomes dos campeões, &lt;code&gt;races&lt;/code&gt; com os anos e os números das corridas, &lt;code&gt;info1&lt;/code&gt; com informações do campeão como país, tempo da prova, horário de largada e percurso, e &lt;code&gt;info2&lt;/code&gt; com informações da prova como pontos de largada e chegada.
Dessa dorma temos 1 informação no atributo &lt;code&gt;names&lt;/code&gt;, 2 informações no atributo &lt;code&gt;races&lt;/code&gt;, 4 informações em &lt;code&gt;info1&lt;/code&gt; e 2 em &lt;code&gt;info2&lt;/code&gt;, totalizando 9 informações que vão virar 9 colunas em um &lt;em&gt;DataFrame&lt;/em&gt;.
Os atributos &lt;code&gt;info1&lt;/code&gt; e &lt;code&gt;info2&lt;/code&gt; são parágrafos de forma que foi necessário quebrá-los em linhas e limpar as bordas antes de usá-los.&lt;/p&gt;
&lt;p&gt;Aqui eu tenho um ponto importante, eu poderia ter feiro todo o &lt;em&gt;parse&lt;/em&gt; já no &lt;em&gt;scrap&lt;/em&gt;, mas preferi deixar isso para uma segunda etapa.
Essa foi uma decisão subjetiva, gosto de separar o problema em partes pequenas.&lt;/p&gt;
&lt;p&gt;O que eu espero após &lt;code&gt;SaoSilvestreScrap&lt;/code&gt; ser aplicado a uma página de campeão?
Eu espero que &lt;code&gt;names&lt;/code&gt; contenha uma lista todos os nomes dos campeões contidos na página, &lt;code&gt;races&lt;/code&gt; contenha outra lista com todos os títulos com os números das provas e seus respectivos anos, &lt;code&gt;info1&lt;/code&gt; contenha uma lista de listas pois, originalmente eu teria uma lista com os conteúdos dos parágrafos e após o &lt;code&gt;split&lt;/code&gt; ser aplicado a cada elemento eu fico com uma lista de listas, e em &lt;code&gt;info2&lt;/code&gt; também espero uma lista de listas, pelo mesmo motivo de &lt;code&gt;info1&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Extraindo informação do texto&lt;/h3&gt;
&lt;p&gt;O &lt;em&gt;scrap&lt;/em&gt; me dá a informação bruta e eu preciso trabalhar essa informação, convertendo para os formatos padronizados e associar aos campos já identificados:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nome&lt;/li&gt;
&lt;li&gt;país&lt;/li&gt;
&lt;li&gt;corrida&lt;/li&gt;
&lt;li&gt;ano&lt;/li&gt;
&lt;li&gt;horário&lt;/li&gt;
&lt;li&gt;tempo&lt;/li&gt;
&lt;li&gt;percurso&lt;/li&gt;
&lt;li&gt;largada&lt;/li&gt;
&lt;li&gt;chegada&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para extrair a informação que eu quero do texto eu criei uma subclasse de &lt;code&gt;textparser.TextParser&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SaoSilvestreParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;textparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextParser&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parseNaturalidade&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;r&amp;#39;^Naturalidade:\s(.+)\s?$&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;pais&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parseHorarioLargada&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;r&amp;#39;^Horário da Largada:\s(\d?\d)h(\d\d)\s?$&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;horario&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{0}:{1}:00&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parseHorarioLargada2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;r&amp;#39;^Horário da Largada:\s(\d+) horas&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;horario&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{0}:00:00&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parseTempo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;r&amp;#39;^Tempo\s?:\s?(\d\d)m(in)?(\d\d)s?&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;tempo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;00:{0}:{1}.000&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parsePercurso&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;r&amp;#39;^Percurso:.*\s(\d+(\.\d+)?)\s?([Kk]?)m\s?$&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;percurso&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;k&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parseParticipantes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;r&amp;#39;^Participantes:\s(\d+\.\d+)\satletas\.\s?$&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;participantes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parseLargada&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;r&amp;#39;Largada:\s(.+)\.?\s?$&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;largada&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parseChegada&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;r&amp;#39;Chegada:\s(.+)\.?\s?$&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;chegada&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parseRace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;r&amp;#39;^(\d+). Corrida de São Silvestre – (\d\d\d\d)a?$&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;corrida&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ano&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)))]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parseText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note que cada método possui uma expressão regular como documentação, exceto &lt;code&gt;parseText&lt;/code&gt; que é o retorno padrão quando nenhum outro método é chamado.
O retorno de cada método é uma tupla, ou uma lista de tuplas no caso de &lt;code&gt;parseRace&lt;/code&gt;, onde o primeiro elemento da tupla identifica o campo e o segundo elemento o seu valor.
Essa foi a forma que eu encontrei para fazer o &lt;em&gt;parse&lt;/em&gt; por que eu preciso da identidicação dos campos para colocá-los em uma estrutura tabular.
O &lt;code&gt;textparser.TextParser&lt;/code&gt; possui um método &lt;code&gt;parse(text)&lt;/code&gt; onde o texto passado como argumento é testado para cada expressão regular, a primeira que der &lt;em&gt;match&lt;/em&gt; o respectivo método é chamado.
Caso não ocorra um &lt;em&gt;match&lt;/em&gt; o método retorna o padrão, que é executar &lt;code&gt;parseText&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A idéia aqui é passar os atributos &lt;code&gt;races&lt;/code&gt;, &lt;code&gt;info1&lt;/code&gt; e &lt;code&gt;info2&lt;/code&gt; por &lt;code&gt;parse&lt;/code&gt; e assim extrair a informação que me interessa.
No entanto, temos listas e listas de listas e &lt;code&gt;parse&lt;/code&gt; deve ser aplicado para cada elemento atômico.
Por isso eu criei uma composição de funções que aplica &lt;code&gt;parse&lt;/code&gt; a cada elemento atômico e remove os valores nulos, que não deram &lt;em&gt;match&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;compose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SaoSilvestreParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;parse_and_filter_false&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;compose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;infos1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;parse_and_filter_false&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;scrap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;infos2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;parse_and_filter_false&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;scrap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;races&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_and_filter_false&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scrap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;races&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A função &lt;code&gt;parse_and_filter_false&lt;/code&gt; recebe uma lista e aplica &lt;code&gt;parse&lt;/code&gt; para cada elemento, em seguida remove os nulos e no fim gera uma lista, dado que Python3 retorna geradores (para as funções &lt;code&gt;map&lt;/code&gt; e &lt;code&gt;filter&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Após o &lt;em&gt;parsing&lt;/em&gt; eu tenho diversas tuplas com os campos definidos.
Agora veremos como juntar estes campos em uma estrutura tabular.&lt;/p&gt;
&lt;h3&gt;Formatando dados em CSV&lt;/h3&gt;
&lt;p&gt;Para juntar tudo em uma estrutura tabular antes eu preciso que todos os campos sigam o mesmo modelo, ou seja, preciso de tuplas com pares (nome, valor) de cada campo.
Como vimos anteriormente, &lt;code&gt;races&lt;/code&gt;, &lt;code&gt;info1&lt;/code&gt; e &lt;code&gt;info2&lt;/code&gt; foram gerados neste modelo, mas &lt;code&gt;names&lt;/code&gt; não.
Para resolver isso eu criei a função &lt;code&gt;keyfy&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;keyfy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;que gera tuplas identificadas com os elementos de uma sequencia.&lt;/p&gt;
&lt;p&gt;O código abaixo mostra como utilizo &lt;code&gt;tinydf.DataFrame&lt;/code&gt; para juntar todos os dados.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tinydf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;nome&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;pais&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;corrida&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;ano&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;horario&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;tempo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;percurso&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;largada&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;chegada&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;keyfy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scrap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;nome&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;info2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;race&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;info1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;info2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;race&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;infos1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;infos2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;races&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note que gero um &lt;code&gt;dict&lt;/code&gt; a partir de um &lt;code&gt;zip&lt;/code&gt; onde &lt;em&gt;compacto&lt;/em&gt; todos os campos.
Os dicionários são adicionados ao &lt;em&gt;DataFrame&lt;/em&gt; para que no fim o CSV seja impresso.
&lt;code&gt;tinydf&lt;/code&gt; também possui atributos &lt;code&gt;json&lt;/code&gt; e &lt;code&gt;dict&lt;/code&gt;, simplificando a geração de dados estruturados em diferentes formatos.&lt;/p&gt;
&lt;h3&gt;Resultado&lt;/h3&gt;
&lt;p&gt;O resultado final é um arquivo CSV com todos os campeões e todos os campos listados anteriormente.
Este arquivo for gerado e pode ser baixado direto do &lt;a href="https://raw.githubusercontent.com/wilsonfreitas/saosilvestre/master/saosilvestre.csv"&gt;link&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Este arquivo contem diversos erros: campos com valores faltantes (&lt;em&gt;missing values&lt;/em&gt;), informações trocadas, entre outros.
Estes erros são consequência da má qualidade dos dados e do fato de não haver uma forma estrutrada de armazená-los.
Vou analizar os dados capturados em outro post e neste momento vou detalhar melhor o tratamento dos dados.
Vou também analizar a evolução dos tempos de corrida e relacionar com a temperatura, com o objetivo de identificar se a temperatura afeta o desempenho dos campeões.&lt;/p&gt;
&lt;p&gt;Por hora eu gerei um gráfico com a contagem de campeões por paises.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ggplot&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;ss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://raw.githubusercontent.com/wilsonfreitas/saosilvestre/master/saosilvestre.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ss_pais&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ss&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;pais&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ss_pais&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;corrida&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Campeões da Corrida de São Silvestre por país" src="/figure/ss-pais-campeoes.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Código final&lt;/h2&gt;
&lt;p&gt;Segue o código final como é executado.&lt;/p&gt;
&lt;script src="http://gist-it.appspot.com/https://github.com/wilsonfreitas/saosilvestre/blob/master/saosilvestre.py"&gt;
&lt;/script&gt;

&lt;p&gt;Ao longo do texto eu acabei simplificando algumas chamadas com a intenção de tornar o texto mais didático.
Esse foi um trabalho interessante em que após tê-lo concluído eu achei que ficou simples, mas tendo que colocar em texto eu vi que ficou um pouco grande, maior do que eu esperava.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Wilson Freitas</dc:creator><pubDate>Thu, 15 Jan 2015 00:00:00 -0200</pubDate><guid>tag:wilsonfreitas.github.io,2015-01-15:posts/captura-de-dados-da-corrida-de-sao-silvestre-com-python-parte-1.html</guid><category>python</category><category>scraps</category><category>textparser</category><category>tinydf</category></item><item><title>Faça você mesmo um Web Scraper em Python</title><link>http://wilsonfreitas.github.io/posts/faca-voce-mesmo-um-web-scraper-em-python.html</link><description>&lt;p&gt;Já não é de hoje que Python é tida como uma ótima linguagem para realizar tarefas de captura de dados na Internet.
Eu sempre gostei de utilizar Python para capturar dados na Internet, mas nunca me preocupei em fazer isso de forma estruturada.
No entanto, para um projeto pessoal, eu precisei recentemente realizar capturas de dados financeiros em diversos sites e senti a necessidade de alguma ferramenta que me permitisse fazer as capturas de forma mais estruturada.
Eu sei que há diversos projetos que atacam este problema de diversas formas.
Até investi algum tempo utilizando o &lt;a href="http://scrapy.org/" title="Scrapy"&gt;Scrapy&lt;/a&gt;, mas logo vi que ele era demais para o que eu precisava.
Fora que eu não encontrei, num primeiro momento, uma forma de fazer nele exatamente o que eu precisava (já explico).
Foi assim que decidi fazer o meu próprio &lt;em&gt;web scraper&lt;/em&gt; utilizando algumas coisas que eu já havia construído.&lt;/p&gt;
&lt;h4&gt;Por que você não usa o Scrapy?&lt;/h4&gt;
&lt;p&gt;Bem, não sei. Simplismente não gostei. Acho que tem dependências demais e não gosto de dependências demais.
Já basta o Pandas, numpy, scipy e matplotlib que eu tenho que usar e ter uma vida miserável toda vez que eu decido compilar uma nova versão.
Mas a verdade mesmo é que eu queria algo que pudesse executar no Google App Engine e com tamanha quantidade de dependências logo vi que não ia rolar.&lt;/p&gt;
&lt;p&gt;Mas na verdade ainda, houveram alguns pontos que eu entendia relevantes e posto isso eu resolvi tentar uma solução caseira.
Estes pontos são:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Não gostei da forma que a classe &lt;code&gt;Item&lt;/code&gt; funciona. Na verdade gostei muito da classe &lt;code&gt;Item&lt;/code&gt;, mas pra usar da maneira proposta eu me viro bem com um &lt;code&gt;dict&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Outra coisa é que o método de &lt;em&gt;parse&lt;/em&gt; é implementado de uma forma que toda a inteligência do &lt;em&gt;scraper&lt;/em&gt; fica num lugar só.Eu procurava algo com uma idéia mais transcedental, de transformação, onde eu tivesse o conteúdo extraído da página e fosse transformando ele até obter o que eu desejasse.&lt;/li&gt;
&lt;li&gt;A declaração das URLs no &lt;em&gt;spider&lt;/em&gt; pra mim era limitada, uma vez que eu precisava de URLs dinâmicas (com datas), pois alguns dados do mercado financeiro são divulgados assim, infelizmente!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Entra em cena: &lt;code&gt;scraps&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Bem, foi assim que eu começei, há alguns meses atrás, a escrever o &lt;code&gt;scraps&lt;/code&gt; e desde então venho usando ele pra diversas capturas.&lt;/p&gt;
&lt;script src="https://gist.github.com/wilsonfreitas/8bd1a0a5296c65948918.js"&gt;&lt;/script&gt;

&lt;p&gt;O &lt;code&gt;scraps&lt;/code&gt; é um módulo Python muito simples onde eu tenho apenas 2 classes (&lt;code&gt;Scrap&lt;/code&gt; e &lt;code&gt;Attribute&lt;/code&gt;) e com elas eu resolvo a minha vida com capturas na Internet.
É óbvio que esta não é uma solução final, é um quebra galho mesmo, mas é um macaco gordo!&lt;/p&gt;
&lt;p&gt;Coisas legais ao desenvolver &lt;code&gt;scraps&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;É muito bom desenvolver módulos para necessidades específicas. As vezes eu tenho a impressão que toda a programação (ou os programadores) querem tratar as soluções como grandes LEGOs e para isso ficam a busca de quais são os &lt;em&gt;frameworks&lt;/em&gt; da moda para compor a obra. Obviamente para mim é fácil falar dado que não vivo de programação e não tenho a necessidade de mercado me pressionando para ficar na vanguarda. Na minha praia que é computação científica eu defendo menos bibliotecas e mais implementação.&lt;/li&gt;
&lt;li&gt;Eu pude finalmente utilizar &lt;strong&gt;Python Descriptors&lt;/strong&gt; ou pelo mesmo usá-lo em algo útil que não um exemplo de descriptors. Fiquei muito feliz com o resultado final, apesar da implementação ainda parecer um &lt;em&gt;hack&lt;/em&gt; malígno.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;code&gt;scraps&lt;/code&gt; em ação&lt;/h2&gt;
&lt;p&gt;A seguir vou mostrar um exemplo simples do meu uso para &lt;code&gt;scraps&lt;/code&gt;, mas a idéia é bastante simples: capturar a taxa de juros de depósitos interbancários (Taxa DI) no site da &lt;a href="http://www.cetip.com.br/" title="CETIP"&gt;CETIP&lt;/a&gt;.
A URL é da página incial da CETIP: http://www.cetip.com.br/ e segue o trecho de código HTML de onde quero capturar os dados:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;...
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;box-taxa&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&amp;lt;b&amp;gt;&lt;/span&gt;TAXA DI:&lt;span class="nt"&gt;&amp;lt;/b&amp;gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ctl00_Banner_lblTaxDateDI&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;(18/12/2014)&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bg-taxa&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;txt-taxa-porcentagem&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ctl00_Banner_lblTaxDI&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;11,59%&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Segue também um pedaço da tela com uma visualização da informação:&lt;/p&gt;
&lt;p&gt;&lt;img alt="CETIP" src="/figure/cetip.png" /&gt;&lt;/p&gt;
&lt;p&gt;Por sorte a CETIP utiliza &lt;code&gt;id&lt;/code&gt; nas &lt;em&gt;tags&lt;/em&gt; que me interessam, o que torna tudo mais simples.
Do trecho acima eu quero as tags &lt;code&gt;span&lt;/code&gt; com ids &lt;code&gt;ctl00_Banner_lblTaxDateDI&lt;/code&gt; e &lt;code&gt;ctl00_Banner_lblTaxDI&lt;/code&gt;, com a data de divulgação da taxa e a taxa, respectivamente.&lt;/p&gt;
&lt;p&gt;No mundo &lt;code&gt;scraps&lt;/code&gt; eu tenho a classe &lt;code&gt;scpras.Scrap&lt;/code&gt; que representa o que eu quero extrair do conteúdo da URL.
Nessa classe eu declaro atributros de classe que são instâncias da classe &lt;code&gt;scraps.Attribute&lt;/code&gt; e identificam as &lt;em&gt;tags&lt;/em&gt; que serão capturadas.
As &lt;em&gt;tags&lt;/em&gt; são definidas pelo XPath que eu quero capturar.
Para o HTML acima temos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CetipScrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scraps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Scrap&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scraps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Attribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;//*[@id=&amp;quot;ctl00_Banner_lblTaxDateDI&amp;quot;]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;taxa&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scraps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Attribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;//*[@id=&amp;quot;ctl00_Banner_lblTaxDI&amp;quot;]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Declarado dessa forma temos que o atributo &lt;code&gt;data&lt;/code&gt; captura o conteúdo em texto de todas as &lt;em&gt;tags&lt;/em&gt; com id &lt;code&gt;ctl00_Banner_lblTaxDateDI&lt;/code&gt; e o atributo &lt;code&gt;taxa&lt;/code&gt; o mesmo para o id &lt;code&gt;ctl00_Banner_lblTaxDI&lt;/code&gt;.
Poderia ser mais específico com o XPath, no entanto, para este exemplo não faria diferença.
Em HTMLs menos estruturados vale a pena dedicar mais tempo a definição do XPath.&lt;/p&gt;
&lt;p&gt;Para testar a captura é necessário apenas instanciar a classe &lt;code&gt;CetipScrap&lt;/code&gt; e invocar o seu método &lt;code&gt;fetch&lt;/code&gt; passando a URL.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;scrap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CetipScrap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;scrap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://www.cetip.com.br&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scrap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scrap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;taxa&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Este código gera:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[&amp;#39;(18/12/2014)&amp;#39;]&lt;/span&gt;
&lt;span class="k"&gt;[&amp;#39;11,59%&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note que os atributos &lt;code&gt;data&lt;/code&gt; e &lt;code&gt;taxa&lt;/code&gt; retornam listas, da mesma forma que as APIs de XML sempre retornam listas de elementos nas suas consultas e o conteúdo das listas são textos contidos nas tags.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3&gt;Dica: retorno dos atributos&lt;/h3&gt;
&lt;p&gt;Os atributos, instâncias de &lt;code&gt;scraps.Attribute&lt;/code&gt;, sempre retornam listas de textos.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Formatando os atributos&lt;/h3&gt;
&lt;p&gt;O trabalho poderia dar-se por encerrado aqui, afinal já consegui extrair os textos com a data de divulgação e o valor da taxa DI.
No entanto, eu ainda quero que estes dados sejam formatados.
Para trabalhar os dados eu tenho o atributo &lt;code&gt;apply&lt;/code&gt; do construtor de &lt;code&gt;scraps.Attribute&lt;/code&gt; onde eu passo uma coleção de funções que será aplicada a cada elemento da lista com o conteúdo em texto dos elementos.
Dessa maneira eu posso estruturar a transformação dos dados sem ficar preso a um método onde todo o trabalho de tratamento e transformação é realizado.&lt;/p&gt;
&lt;p&gt;Para realizar essa tarefa eu crio algumas pequenas funções para me ajudarem e altero a declaração de &lt;code&gt;CetipScrap&lt;/code&gt;, ficando tudo mais ou menos assim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;divide_by&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;strptime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strptime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_to&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_to&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_replace&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CetipScrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scraps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Scrap&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scraps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Attribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;//*[@id=&amp;quot;ctl00_Banner_lblTaxDateDI&amp;quot;]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;strptime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;(&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;/%m/%Y)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;taxa&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scraps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Attribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;//*[@id=&amp;quot;ctl00_Banner_lblTaxDI&amp;quot;]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;%&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;divide_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;scrap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CetipScrap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;scrap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://www.cetip.com.br&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scrap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scrap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;taxa&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A idéia aqui é:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No atributo &lt;code&gt;data&lt;/code&gt; formatar como &lt;code&gt;datetime.datetime&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;No atributo &lt;code&gt;taxa&lt;/code&gt; formatar como &lt;code&gt;float&lt;/code&gt;, mas como o número está em pt-BT e em percentual, é necessário substituir vírgula por ponto e remover o símbolo de por cento, para na sequência converter para floar e dividir por 100&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No atributo &lt;code&gt;data&lt;/code&gt; a função &lt;code&gt;strptime('(%d/%m/%Y)')&lt;/code&gt; é aplicada a cada elemento da lista.
Já no atributo &lt;code&gt;taxa&lt;/code&gt; a funções &lt;code&gt;replace([',', '%'], ['.', ''])&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt; e &lt;code&gt;divide_by(100)&lt;/code&gt; são aplicadas na ordem espeficidada, a cada elemento da lista.&lt;/p&gt;
&lt;p&gt;Executando o código acima temos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[datetime.datetime(2014, 12, 18, 0, 0)]&lt;/span&gt;
&lt;span class="k"&gt;[0.1159]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As funções &lt;code&gt;strptime&lt;/code&gt;, &lt;code&gt;replace&lt;/code&gt; e &lt;code&gt;divide_by&lt;/code&gt; me ajudaram na transformação dos dados.
Estas funções retornam funções que executam as tarefas para as quais foram especificadas.
Por exemplo, a chamada &lt;code&gt;divide_by(100)&lt;/code&gt; retorna uma função que divide o argumento por 100 e a chamada &lt;code&gt;strptime('(%/d/%m/%Y)')&lt;/code&gt; retorna uma função que recebe uma argumento texto, no formato especificado, e retorna um &lt;code&gt;datetime.datetime&lt;/code&gt;.
Uma abordagem interessante para o uso de &lt;code&gt;scraps&lt;/code&gt; seria investir mais tempo na criação dessas funções, para assim tornar a transformação em um conjunto de regras padrão.
Funcionaria mais ou menos como no diagrama abaixo.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Diagrama da classe Attribute" src="/figure/attribute-diag-1.png" /&gt; &lt;/p&gt;
&lt;p&gt;Abaixo segue o código final da implementação onde eu utilizo &lt;code&gt;scraps&lt;/code&gt; para obter a taxa de juros diária divulgada no site da &lt;a href="http://www.cetip.com.br/" title="CETIP"&gt;CETIP&lt;/a&gt;.&lt;/p&gt;
&lt;script src="https://gist.github.com/wilsonfreitas/4b8e7e215e3a8a27eb90/a315f617b2059640a17edc72907a5b68571629c9.js"&gt;&lt;/script&gt;

&lt;h2&gt;Conclusão&lt;/h2&gt;
&lt;p&gt;Escrever &lt;code&gt;scpras&lt;/code&gt; foi divertido e usá-lo é mais legal ainda.
Exercito muito a minha criatividade pensando em transformações para os dados.
Mas há uma ideia subliminar aqui que é estruturar do tratamento dos dados em pequenas etapas.
Uma vez que eu consiga mapear um conjunto de funções que atende a um número considerável de problemas eu posso estruturar essa solução e torná-la mais automática, o que me faz pensar na construção de capturas on-line.
De qualquer forma, &lt;code&gt;scraps&lt;/code&gt; é um módulo que eu classificaria como &lt;em&gt;quick-and-dirty&lt;/em&gt;, mas me ajuda a exercitar a minha criatividade e a dar vazão as coisas.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Wilson Freitas</dc:creator><pubDate>Thu, 18 Dec 2014 00:00:00 -0200</pubDate><guid>tag:wilsonfreitas.github.io,2014-12-18:posts/faca-voce-mesmo-um-web-scraper-em-python.html</guid><category>python</category><category>scraps</category></item></channel></rss>